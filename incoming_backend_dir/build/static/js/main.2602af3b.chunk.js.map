{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","utilityFxns.ts","AddEntryModal/HealthcheckEntryForm.tsx","AddEntryModal/HospitalEntryForm.tsx","AddEntryModal/OccupationalHealthcareEntryForm.tsx","AddEntryModal/index.tsx","Entries/HealthCheckEntryComponent.tsx","Entries/HospitalEntryComponent.tsx","Entries/OccupationalHealthEntryComponent.tsx","PatientDetailsPage/EntryDetails.tsx","PatientDetailsPage/index.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRatingEnum","EntryTypeNames","apiBaseUrl","addToPatientInfoList","patient","type","payload","addToDiagnoses","diagnoses","initialState","patients","patientInfo","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectGenderField","name","label","options","Form","Field","as","className","map","option","TextField","field","placeholder","style","color","NumberField","min","max","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","key","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","requiredError","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","newPatient","console","response","Container","textAlign","Table","celled","selectable","Row","HeaderCell","Body","Object","Cell","to","id","todaysDate","Date","toJSON","split","healthCheckEntrySchema","Yup","shape","description","required","date","default","specialist","diagnosisCodes","ensure","of","healthCheckRating","integer","matches","HealthCheck","HealthcheckEntryForm","validationSchema","hospitalEntrySchema","Hospital","discharge","criteria","HospitalEntryForm","occupationalHealthcareEntrySchema","OccupationalHealthcare","employerName","sickLeave","startDate","when","endDate","datePlusOne","setDate","getDate","OccupationalHealthcareEntryForm","AddEntryModal","entryFormType","setEntryFormType","obj","entryTypeDropDownValues","keys","filter","k","Number","isNaN","e","renderForm","HealthCheckEntryComponent","entry","diagnosisDetails","Card","Icon","size","Meta","Description","d","index","HospitalEntryComponent","OccupationalHealthEntryComponent","EntryDetails","populateDiagnosesDetails","diagnosesDetailArr","length","forEach","details","find","push","Error","JSON","stringify","assertNever","PatientDetailsPage","useParams","currentPatient","p","useEffect","get","fetchPatientInfo","fetchDiagnoses","fetchedDiagnoses","submitNewEntry","updatedPatient","display","alignItems","paddingRight","margin","genderIcons","entries","App","patientListFromApi","fetchPatientList","Link","primary","Divider","hidden","path","exact","ReactDOM","render","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.2602af3b.chunk.js","sourcesContent":["export interface Diagnosis {\r\n  code: string;\r\n  name: string;\r\n  latin?: string;\r\n}\r\n\r\nexport enum Gender {\r\n  Male = \"male\",\r\n  Female = \"female\",\r\n  Other = \"other\"\r\n}\r\n\r\nexport enum HealthCheckRatingEnum {\r\n  \"Healthy\" = 0,\r\n  \"LowRisk\" = 1,\r\n  \"HighRisk\" = 2,\r\n  \"Critical\" = 3,\r\n}\r\n\r\ninterface Discharge {\r\n  date: string\r\n  criteria: string\r\n}\r\n\r\ninterface SickLeave {\r\n  startDate: string;\r\n  endDate: string;\r\n}\r\n\r\ninterface BaseEntry {\r\n  id: string;\r\n  description: string;\r\n  date: string;\r\n  specialist: string;\r\n  //we already have a Diagnosis type defined, we can refer to the code field of the Diagnosis type directly in case its type ever changes\r\n  //https://fullstackopen.com/en/part9/react_with_types#full-entries\r\n  diagnosisCodes?: Array<Diagnosis['code']>;\r\n}\r\n\r\nexport enum EntryTypeNames {\r\n  HealthCheck =\"HealthCheck\",\r\n  OccupationalHealthcare =\"OccupationalHealthcare\",\r\n  Hospital= \"Hospital\"\r\n}\r\n\r\nexport interface HealthCheckEntry extends BaseEntry {\r\n  type: EntryTypeNames.HealthCheck\r\n  healthCheckRating: HealthCheckRatingEnum;\r\n}\r\n\r\nexport interface OccupationalHealthcareEntry extends BaseEntry {\r\n  type: EntryTypeNames.OccupationalHealthcare;\r\n  employerName: string;\r\n  sickLeave?: SickLeave\r\n}\r\n\r\nexport interface HospitalEntry extends BaseEntry {\r\n  type: EntryTypeNames.Hospital;\r\n  discharge?: Discharge\r\n}\r\n\r\n//https://fullstackopen.com/en/part9/react_with_types#full-entries\r\nexport type Entry = \r\n| HealthCheckEntry \r\n| HospitalEntry\r\n| OccupationalHealthcareEntry;\r\n\r\nexport type HealthCheckEntryFormValues  = Omit<HealthCheckEntry, \"id\">;\r\n\r\nexport type HospitalEntryFormValues = Omit<HospitalEntry, \"id\">;\r\nexport interface FlattenedHospitalEntryFormValues extends Omit<HospitalEntry, \"id\"| \"discharge\">{\r\n  dischargeDate: string,\r\n  criteria: string\r\n}\r\n\r\nexport type OccupationalHealthcareEntryFormValues = Omit<OccupationalHealthcareEntry, \"id\">;\r\nexport interface FlattenedOccupationalHealthcareEntryFormValues extends Omit<OccupationalHealthcareEntry, \"id\"| \"sickLeave\">{\r\n  employerName: string;\r\n  sickLeaveStartDate?: string;\r\n  sickLeaveEndDate?: string\r\n}\r\n\r\nexport type EntryFormValues = \r\n| HospitalEntryFormValues \r\n| HealthCheckEntryFormValues\r\n| OccupationalHealthcareEntryFormValues;\r\n\r\nexport interface Patient {\r\n  id: string;\r\n  name: string;\r\n  occupation: string;\r\n  gender: Gender;\r\n  ssn?: string;\r\n  dateOfBirth?: string;\r\n  entries: Entry[]\r\n}\r\n","export const apiBaseUrl = 'http://localhost:3001/api';\r\n","import { State } from \"./state\";\r\nimport { Patient, Diagnosis } from \"../types\";\r\n\r\nexport type Action =\r\n  | {\r\n      type: \"SET_PATIENT_LIST\";\r\n      payload: Patient[];\r\n    }\r\n  | {\r\n      type: \"ADD_TO_PATIENT_INFO_LIST\";\r\n      payload: Patient;\r\n    }\r\n  | {\r\n      type: \"ADD_PATIENT\";\r\n      payload: Patient;\r\n    }\r\n  | {\r\n    type: \"ADD_DIAGNOSES\";\r\n    payload: Diagnosis[];\r\n  };\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"SET_PATIENT_LIST\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...action.payload.reduce(\r\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n            {}\r\n          ),\r\n          ...state.patients\r\n        }\r\n      };\r\n    case \"ADD_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...state.patients,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n    case \"ADD_TO_PATIENT_INFO_LIST\": \r\n      return {\r\n        ...state,\r\n        patientInfo:{\r\n          ...state.patientInfo,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n    case \"ADD_DIAGNOSES\": \r\n    return {\r\n      ...state,\r\n      diagnoses:[...action.payload]\r\n    };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//Action Creators\r\n//https://redux.js.org/tutorials/fundamentals/part-7-standard-patterns#action-creators\r\n\r\n/**\r\n * \r\n * @param {Patient} patient \r\n * @returns {Action} action to add the fetched patient's details to state so that it doesnt need to be fetched again.\r\n */\r\nexport const addToPatientInfoList = (patient: Patient): Action => {\r\n  return { type: \"ADD_TO_PATIENT_INFO_LIST\", payload: patient };\r\n};\r\n\r\n/**\r\n * \r\n * @param {Patient} newPatient \r\n * @returns {Action} action to add a newly created patient\r\n */\r\nexport const addPatient = (newPatient: Patient): Action => {\r\n  return { type: \"ADD_TO_PATIENT_INFO_LIST\", payload: newPatient };\r\n};\r\n\r\n/**\r\n * \r\n * @param {Patient[]} patientList \r\n * @returns {Action} action to add the array of Patients to state\r\n */\r\nexport const setPatientList =(patientList: Patient[]): Action => {\r\n  return { type: \"SET_PATIENT_LIST\", payload: patientList };\r\n};\r\n\r\n/**\r\n * \r\n * @param {Diagnosis[]} diagnoses  \r\n * @returns {Action} action to add the fetched diagnoses to state so that it doesnt need to be fetched again.\r\n */\r\n export const addToDiagnoses = (diagnoses: Diagnosis[]): Action => {\r\n  return { type: \"ADD_DIAGNOSES\", payload: diagnoses };\r\n};","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { Diagnosis, Patient } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\n//https://fullstackopen.com/en/part9/react_with_types#state-handling\r\nexport type State = {\r\n  patients: { [id: string]: Patient};\r\n  patientInfo: { [id: string] :Patient }\r\n  diagnoses: Diagnosis[]\r\n};\r\n\r\nconst initialState: State = {\r\n  patients: {},\r\n  patientInfo: {},\r\n  diagnoses: []\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n  initialState,\r\n  () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n  reducer: React.Reducer<State, Action>;\r\n  children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n  reducer,\r\n  children\r\n}: StateProviderProps) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <StateContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from \"react\";\r\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\r\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\r\nimport { Diagnosis, Gender } from \"../types\";\r\n\r\n// structure of a single option\r\nexport type GenderOption = {\r\n  value: Gender;\r\n  label: string;\r\n};\r\n\r\n// props for select field component\r\ntype SelectGenderFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: GenderOption[];\r\n};\r\n\r\nexport const SelectGenderField = ({\r\n  name,\r\n  label,\r\n  options\r\n}: SelectGenderFieldProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label || option.value}\r\n        </option>\r\n      ))}\r\n    </Field>\r\n  </Form.Field>\r\n);\r\n\r\ninterface TextProps extends FieldProps {\r\n  label: string;\r\n  placeholder: string;\r\n}\r\n\r\nexport const TextField= ({\r\n  field,\r\n  label,\r\n  placeholder\r\n}: TextProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field placeholder={placeholder} {...field} />\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\n/*\r\n  for exercises 9.24.-\r\n*/\r\ninterface NumberProps extends FieldProps {\r\n  label: string;\r\n  errorMessage?: string;\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport const NumberField = ({ field, label, min, max } : NumberProps ) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field {...field} type='number' min={min} max={max} />\r\n\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\nexport const DiagnosisSelection = ({\r\n  diagnoses,\r\n  setFieldValue,\r\n  setFieldTouched\r\n}: {\r\n  diagnoses: Diagnosis[];\r\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\r\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\r\n}) => {\r\n  const field = \"diagnosisCodes\";\r\n  const onChange = (\r\n    _event: React.SyntheticEvent<HTMLElement, Event>,\r\n    data: DropdownProps\r\n  ) => {\r\n    setFieldTouched(field, true);\r\n    setFieldValue(field, data.value);\r\n  };\r\n\r\n  const stateOptions = diagnoses.map(diagnosis => ({\r\n    key: diagnosis.code,\r\n    text: `${diagnosis.name} (${diagnosis.code})`,\r\n    value: diagnosis.code\r\n  }));\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Diagnoses</label>\r\n      <Dropdown\r\n        fluid\r\n        multiple\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        onChange={onChange}\r\n      />\r\n      <ErrorMessage name={field} />\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField, SelectGenderField, GenderOption } from \"./FormField\";\r\nimport { Gender, Patient } from \"../types\";\r\n\r\n/*\r\n * use type Patient, but omit id and entries,\r\n * because those are irrelevant for new patient object.\r\n */\r\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\r\n\r\ninterface Props {\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst genderOptions: GenderOption[] = [\r\n  { value: Gender.Male, label: \"Male\" },\r\n  { value: Gender.Female, label: \"Female\" },\r\n  { value: Gender.Other, label: \"Other\" }\r\n];\r\n\r\nexport const AddPatientForm = ({ onSubmit, onCancel } : Props ) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        ssn: \"\",\r\n        dateOfBirth: \"\",\r\n        occupation: \"\",\r\n        gender: Gender.Other\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.name) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.ssn) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        if (!values.dateOfBirth) {\r\n          errors.dateOfBirth = requiredError;\r\n        }\r\n        if (!values.occupation) {\r\n          errors.occupation = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Social Security Number\"\r\n              placeholder=\"SSN\"\r\n              name=\"ssn\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Date Of Birth\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"dateOfBirth\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Occupation\"\r\n              placeholder=\"Occupation\"\r\n              name=\"occupation\"\r\n              component={TextField}\r\n            />\r\n            <SelectGenderField\r\n              label=\"Gender\"\r\n              name=\"gender\"\r\n              options={genderOptions}\r\n            />\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddPatientForm;\r\n","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddPatientModal;\r\n","import React from 'react';\r\nimport { Rating } from 'semantic-ui-react';\r\n\r\ntype BarProps = {\r\n  rating: number;\r\n  showText: boolean;\r\n};\r\n\r\nconst HEALTHBAR_TEXTS = [\r\n  'The patient is in great shape',\r\n  'The patient has a low risk of getting sick',\r\n  'The patient has a high risk of getting sick',\r\n  'The patient has a diagnosed condition',\r\n];\r\n\r\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\r\n  return (\r\n    <div className=\"health-bar\">\r\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\r\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthRatingBar;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Table, Button } from \"semantic-ui-react\";\r\n\r\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\r\nimport AddPatientModal from \"../AddPatientModal\";\r\nimport { Patient } from \"../types\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport HealthRatingBar from \"../components/HealthRatingBar\";\r\nimport { useStateValue } from \"../state\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PatientListPage = () => {\r\n  const [{ patients }, dispatch] = useStateValue();\r\n\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  const submitNewPatient = async (values: PatientFormValues) => {\r\n    try {\r\n      const { data: newPatient } = await axios.post<Patient>(\r\n        `${apiBaseUrl}/patients`,\r\n        values\r\n      );\r\n      dispatch({ type: \"ADD_PATIENT\", payload: newPatient });\r\n      closeModal();\r\n    } catch (e: any) {\r\n      console.error(e.response?.data || 'Unknown Error');\r\n      setError(e.response?.data?.error || 'Unknown error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container textAlign=\"center\">\r\n        <h3>Patient list</h3>\r\n      </Container>\r\n      <Table celled selectable>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Gender</Table.HeaderCell>\r\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\r\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {Object.values(patients).map((patient: Patient) => (\r\n            <Table.Row key={patient.id}  >\r\n              <Table.Cell><Link to={`/patients/${patient.id}`}>{patient.name}</Link></Table.Cell>\r\n              <Table.Cell><Link to={`/patients/${patient.id}`}>{patient.gender}</Link></Table.Cell>\r\n              <Table.Cell><Link to={`/patients/${patient.id}`}>{patient.occupation}</Link></Table.Cell>\r\n              <Table.Cell>\r\n                <HealthRatingBar showText={false} rating={1} />\r\n              </Table.Cell>\r\n            </Table.Row>\r\n\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n      <AddPatientModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewPatient}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Patient</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListPage;\r\n","\r\n//date in this format 2021-12-06\r\nexport const todaysDate = new Date().toJSON().split(\"T\")[0];","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport {  DiagnosisSelection, NumberField, TextField } from '../AddPatientModal/FormField';\r\nimport { useStateValue } from '../state';\r\nimport { HealthCheckEntryFormValues, EntryTypeNames } from '../types';\r\nimport * as Yup from 'yup';\r\nimport { todaysDate } from '../utilityFxns';\r\n\r\n\r\nconst healthCheckEntrySchema = Yup.object().shape({\r\n  description: Yup.string().min(4, 'Must be ${min} characters or more').required(),\r\n  date: Yup.date().default(() => new Date()).required(),\r\n  specialist: Yup.string().min(1, 'Too short!').required(),\r\n  diagnosisCodes: Yup.array().ensure().of(Yup.string()),\r\n  healthCheckRating: Yup.number().min(0).max(3).integer().required().default(() => 3),\r\n  //this takes an exact match of a word and gives this error message if not\r\n  type: Yup.string().matches(/\\bHealthCheck\\b/, \"The value must be exactly -> \" + EntryTypeNames.HealthCheck).default(() => EntryTypeNames.HealthCheck)//The value has to be healthcheck\r\n});\r\n\r\n\r\ninterface Props {\r\n  onSubmit: (values: HealthCheckEntryFormValues) => void;\r\n  //onSubmit: () => void;\r\n  onCancel: () => void;\r\n}\r\nexport const HealthcheckEntryForm = ({ onSubmit, onCancel }: Props) => {\r\n  const [{ diagnoses }]  = useStateValue();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        description: \"\",\r\n        date: todaysDate,\r\n        specialist: \"\",\r\n        diagnosisCodes: [],\r\n        type : EntryTypeNames.HealthCheck,\r\n        healthCheckRating: 3,\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validationSchema= {healthCheckEntrySchema}\r\n    >\r\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Date\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"date\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Description\"\r\n              placeholder=\"Description\"\r\n              name=\"description\"\r\n              component={TextField} \r\n            />\r\n\r\n            <Field\r\n              label=\"Specialist\"\r\n              placeholder=\"Specialist\"\r\n              name=\"specialist\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Health Check Rating\"\r\n              name=\"healthCheckRating\"\r\n              component={NumberField}\r\n              min={0}\r\n              max={3}\r\n            />\r\n\r\n            <Field\r\n              label=\"Visit type\"\r\n              placeholder=\"HealthCheck\"\r\n              name=\"type\"\r\n              component={TextField}\r\n            />\r\n\r\n            <DiagnosisSelection\r\n              setFieldValue={setFieldValue}\r\n              setFieldTouched={setFieldTouched}\r\n              diagnoses={Object.values(diagnoses)}\r\n            />\r\n\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Save Entry\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n/*      validate={(values) => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n\r\n        if (!values.date) {\r\n          errors.date = requiredError;\r\n        }\r\n        if (!values.description) {\r\n          errors.description = requiredError;\r\n        }\r\n        if (!values.specialist) {\r\n          errors.specialist = requiredError;\r\n        }\r\n        if (!values.type) {\r\n          errors.type = requiredError;\r\n        }\r\n        if (values.type !== EntryTypeNames.HealthCheck) {\r\n          errors.type = \"value should be \" + EntryTypeNames.HealthCheck;\r\n        }\r\n        if (!values.healthCheckRating) {\r\n          errors.healthCheckRating = requiredError;\r\n        }\r\n        return errors;\r\n      }} */","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport {  DiagnosisSelection, TextField } from '../AddPatientModal/FormField';\r\nimport { useStateValue } from '../state';\r\nimport { EntryTypeNames, FlattenedHospitalEntryFormValues, HospitalEntryFormValues } from '../types';\r\nimport * as Yup from 'yup';\r\nimport { todaysDate } from '../utilityFxns';\r\n\r\nconst hospitalEntrySchema = Yup.object().shape({\r\n  description: Yup.string().min(4).required(),\r\n  date: Yup.date().default(() => new Date()).required(),\r\n  specialist: Yup.string().required().min(1, 'Specialist name is required'),\r\n  diagnosisCodes: Yup.array().ensure().of(Yup.string()),\r\n  //this takes an exact match of a word and gives this error message if not\r\n  type: Yup.string().matches(/\\bHospital\\b/,\r\n     \"The value must be exactly -> \" + EntryTypeNames.Hospital)\r\n     .default(() => EntryTypeNames.Hospital),\r\n  discharge: Yup.object().shape({\r\n    date: Yup.date().default(() => new Date()),\r\n    criteria: Yup.string()\r\n  })\r\n});\r\n\r\ninterface Props {\r\n  onSubmit: (values: HospitalEntryFormValues) => void;\r\n  //onSubmit: () => void;\r\n  onCancel: () => void;\r\n}\r\nexport const HospitalEntryForm = ({ onSubmit, onCancel }: Props) => {\r\n  const [{ diagnoses }]  = useStateValue();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        description: \"\",\r\n        date: todaysDate,\r\n        specialist: \"\",\r\n        diagnosisCodes: [],\r\n        type : EntryTypeNames.Hospital,\r\n        discharge: {\r\n          date: todaysDate,\r\n          criteria: \"\"\r\n        }\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validationSchema={hospitalEntrySchema}\r\n    >\r\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Date\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"date\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Description\"\r\n              placeholder=\"Description\"\r\n              name=\"description\"\r\n              component={TextField} \r\n            />\r\n\r\n            <Field\r\n              label=\"Specialist\"\r\n              placeholder=\"Specialist\"\r\n              name=\"specialist\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Discharge date\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"discharge.date\"\r\n              component={TextField}\r\n            />\r\n            \r\n            <Field\r\n              label=\"Discharge reason\"\r\n              placeholder=\"Thumb has healed\"\r\n              name=\"discharge.criteria\"\r\n              component={TextField}\r\n            />\r\n\r\n            <Field\r\n              label=\"Visit type\"\r\n              placeholder=\"Hospital\"\r\n              name=\"type\"\r\n              component={TextField}\r\n            />\r\n\r\n            <DiagnosisSelection\r\n              setFieldValue={setFieldValue}\r\n              setFieldTouched={setFieldTouched}\r\n              diagnoses={Object.values(diagnoses)}\r\n            />\r\n\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Save Entry\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport {  DiagnosisSelection, TextField } from '../AddPatientModal/FormField';\r\nimport { useStateValue } from '../state';\r\nimport { EntryTypeNames, OccupationalHealthcareEntryFormValues } from '../types';\r\nimport * as Yup from 'yup';\r\nimport { todaysDate } from '../utilityFxns';\r\n\r\nconst occupationalHealthcareEntrySchema = Yup.object().shape({\r\n  description: Yup.string().min(4, 'Must be {min} characters or more').required(),\r\n  date: Yup.date().default(() => new Date()).required(),\r\n  specialist: Yup.string().required().min(1, 'Specialist name is required'),\r\n  diagnosisCodes: Yup.array().ensure().of(Yup.string()),\r\n  //this takes an exact match of a word and gives this error message if not\r\n  type: Yup.string().matches(/\\bOccupationalHealthcare\\b/,\r\n     \"The value must be exactly -> \" + EntryTypeNames.OccupationalHealthcare)\r\n     .default(() => EntryTypeNames.OccupationalHealthcare),\r\n  employerName: Yup.string().required('Employer name is required'),\r\n  sickLeave: Yup.object().shape({\r\n    startDate: Yup.date()\r\n      /* make it so that the start date cannot be later than the end date and vice versa*/\r\n      .when('endDate', (endDate: string) => {\r\n        /*test this again at a different time. the error msg kept being given in the desired date minus one day so I had to manually add one day.*/\r\n        const date: Date =  new Date(endDate);\r\n        const datePlusOne: Date = new Date(date.setDate(date.getDate() + 1));\r\n        return endDate\r\n        ? Yup.date().max(endDate, `Date must be earlier than or equal to end date which is ${datePlusOne.toJSON().split(\"T\")[0]}`)\r\n        : Yup.date().default(() => new Date());\r\n      }),\r\n      /*I cant have the same when clause in startDate also here in endDate. Otherwise it becomes a \r\n      cyclic dependency since they both refer to each other. One is enough for the jon*/\r\n    endDate: Yup.date().default(() => new Date())\r\n  })\r\n});\r\n\r\n\r\n\r\ninterface Props {\r\n  onSubmit: (values: OccupationalHealthcareEntryFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\nexport const OccupationalHealthcareEntryForm = ({ onSubmit, onCancel }: Props) => {\r\n  const [{ diagnoses }]  = useStateValue();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        description: \"\",\r\n        date: todaysDate,\r\n        specialist: \"\",\r\n        diagnosisCodes: [],\r\n        type : EntryTypeNames.OccupationalHealthcare,\r\n        sickLeave: {\r\n          startDate: \"\",\r\n          endDate: \"\",\r\n        },\r\n        employerName: \"\"\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validationSchema= {occupationalHealthcareEntrySchema}\r\n    >\r\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Date\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"date\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Description\"\r\n              placeholder=\"Description\"\r\n              name=\"description\"\r\n              component={TextField} \r\n            />\r\n\r\n            <Field\r\n              label=\"Specialist\"\r\n              placeholder=\"Specialist\"\r\n              name=\"specialist\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Employer name\"\r\n              placeholder=\"Employer name\"\r\n              name=\"employerName\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Sick leave start date (optional)\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"sickLeave.startDate\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Sick leave end date (optional)\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"sickLeave.endDate\"\r\n              component={TextField}\r\n            />\r\n\r\n            <Field\r\n              label=\"Visit type\"\r\n              placeholder=\"Hospital\"\r\n              name=\"type\"\r\n              component={TextField}\r\n            />\r\n\r\n            <DiagnosisSelection\r\n              setFieldValue={setFieldValue}\r\n              setFieldTouched={setFieldTouched}\r\n              diagnoses={Object.values(diagnoses)}\r\n            />\r\n\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Save Entry\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Dropdown, Header, Modal, Segment } from 'semantic-ui-react';\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport { HealthcheckEntryForm  } from './HealthcheckEntryForm';\r\nimport { EntryFormValues, EntryTypeNames } from '../types';\r\nimport { HospitalEntryForm } from './HospitalEntryForm';\r\nimport { OccupationalHealthcareEntryForm } from './OccupationalHealthcareEntryForm';\r\n\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  //onSubmit: (values: any) => void;\r\n  onSubmit: (values: EntryFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nexport const AddEntryModal = ({modalOpen, onClose, onSubmit, error}: Props) => {\r\n  const [entryFormType, setEntryFormType] = React.useState<EntryTypeNames>(EntryTypeNames.HealthCheck);\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  function enumKeys<O extends object, K extends keyof O = keyof O>(obj: O): K[] {\r\n    return Object.keys(obj).filter(k => Number.isNaN(+k)) as K[];\r\n  }\r\n\r\n  const entryTypeDropDownValues = enumKeys(EntryTypeNames).map(e => {\r\n    return { key: e, text: e, value: e as EntryTypeNames };\r\n  });\r\n\r\n  const renderForm = () => {\r\n    switch (entryFormType) {\r\n      case EntryTypeNames.HealthCheck:\r\n\r\n        return <HealthcheckEntryForm\r\n          onCancel={onClose}\r\n          onSubmit={onSubmit}\r\n        />;\r\n      case EntryTypeNames.Hospital:\r\n\r\n        return <HospitalEntryForm\r\n          onCancel={onClose}\r\n          onSubmit={onSubmit}\r\n        />;\r\n      case EntryTypeNames.OccupationalHealthcare:\r\n\r\n        return <OccupationalHealthcareEntryForm\r\n        onCancel={onClose}\r\n        onSubmit={onSubmit} />;\r\n\r\n      default:\r\n        return <p>the switch case of the dropdown is having some error</p>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n      <Modal.Header>Add new entry</Modal.Header>\r\n      <Modal.Content>\r\n      \r\n      <Header as='h4'>Choose vist type</Header>\r\n        <Dropdown placeholder=\"Type of entry\"\r\n          value={entryFormType}\r\n          selection options={entryTypeDropDownValues}\r\n          onChange={(e, { value }) => setEntryFormType(value ? value as EntryTypeNames : EntryTypeNames.HealthCheck)}\r\n        />\r\n      </Modal.Content>\r\n      <Modal.Content>\r\n        {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n        {renderForm()}\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n};\r\n//<Header as \"h4\">Choose vist type</Header>","import React from 'react';\r\nimport { Card, Header, Icon } from 'semantic-ui-react';\r\nimport { HealthCheckEntry, Diagnosis, } from '../types';\r\nimport HealthRatingBar from \"../components/HealthRatingBar\";\r\n\r\ninterface Props {\r\n  entry: HealthCheckEntry\r\n  diagnosisDetails?: Diagnosis[]\r\n}\r\n\r\nexport const HealthCheckEntryComponent = ({entry, diagnosisDetails}: Props) => {\r\n\r\n  //console.log('diagnosisDetails----', diagnosisDetails);\r\n\r\n  return (\r\n    <Card fluid  >\r\n      <Card.Content>\r\n        <Card.Header>{entry.date} <Icon name='doctor' size=\"big\" /></Card.Header>\r\n        <Card.Meta>Specialist: {entry.specialist}</Card.Meta>\r\n        <Card.Description>\r\n          <Header as='h4' > Description</Header>\r\n        {entry.description}\r\n        </Card.Description>\r\n        {/*The lower the number of the health rating, the better the health.\r\n         Yes that seems counterintuitive but I am just using the pre-existing code that I forked. \r\n         and that is how they did it*/}\r\n        <HealthRatingBar showText={false} rating={entry.healthCheckRating} />\r\n        <Header as='h4' > Diagnoses</Header>\r\n        {          \r\n          diagnosisDetails && diagnosisDetails.map((d, index) => {\r\n            return <p key={`${d.code}${index}`} >{d.code}: {d.name}</p>;\r\n          })\r\n        }\r\n\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\n//<HealthRatingBar showText={false} rating={1} />\r\n","import React from 'react';\r\nimport { Card, Header, Icon } from 'semantic-ui-react';\r\nimport { Diagnosis, HospitalEntry } from '../types';\r\n\r\ninterface Props {\r\n  entry: HospitalEntry,\r\n  diagnosisDetails?: Diagnosis[]\r\n}\r\n\r\nexport const HospitalEntryComponent = ({ entry, diagnosisDetails }: Props) => {\r\n\r\n  //console.log('diagnosisDetails----', diagnosisDetails);\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Card.Header>{entry.date} <Icon name='hospital' size=\"big\" /></Card.Header>\r\n        <Card.Meta>Specialist: {entry.specialist}</Card.Meta>\r\n        <Card.Description>\r\n          <Header as='h4' > Description</Header>\r\n        {entry.description}\r\n        </Card.Description>\r\n        {\r\n          entry.discharge && \r\n          <Card.Description>\r\n          <b>discharge date</b>: {entry.discharge.date} <br />\r\n          <b>notes</b>- {entry.discharge.criteria}\r\n          </Card.Description> \r\n        }\r\n        <Header as='h4' > Diagnoses</Header>\r\n        {\r\n        diagnosisDetails && diagnosisDetails.map((d, index) => {\r\n          return <p key={`${d.code}${index}`} >{d.code}: {d.name}</p>;\r\n        })\r\n        }\r\n\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};","import React from 'react';\r\nimport { Card, Header, Icon } from 'semantic-ui-react';\r\nimport { OccupationalHealthcareEntry, Diagnosis } from '../types';\r\n\r\n\r\ninterface Props {\r\n  entry: OccupationalHealthcareEntry,\r\n  diagnosisDetails?: Diagnosis[]\r\n}\r\n\r\nexport const OccupationalHealthEntryComponent = ({ entry, diagnosisDetails }: Props) => {\r\n\r\n  //console.log('diagnosisDetails----', diagnosisDetails);\r\n  return (\r\n    <Card fluid  >\r\n      <Card.Content>\r\n        <Card.Header>{entry.date} <Icon name='doctor' size=\"big\" /> {entry.employerName}</Card.Header>\r\n        <Card.Meta>Specialist: {entry.specialist}</Card.Meta>\r\n        <Card.Description>\r\n          <Header as='h4' > Description</Header>\r\n          {entry.description}\r\n        </Card.Description>\r\n\r\n        {\r\n          entry.sickLeave &&\r\n          <Card.Description>\r\n            <b>sick leave from</b> {entry.sickLeave.startDate} to {entry.sickLeave.endDate}\r\n          </Card.Description>\r\n        }\r\n        <Header as='h4' > Diagnoses</Header>\r\n        {\r\n          \r\n          diagnosisDetails && diagnosisDetails.map((d, index) => {\r\n            return <p key={`${d.code}${index}`} >{d.code}: {d.name}</p>;\r\n          })\r\n        }\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { HealthCheckEntryComponent, HospitalEntryComponent, OccupationalHealthEntryComponent } from '../Entries';\r\nimport { useStateValue } from '../state';\r\nimport { Entry, Diagnosis, EntryTypeNames } from '../types';\r\n\r\n/**\r\n * Helper function for exhaustive type checking\r\n */\r\nconst assertNever = (value: never): never => {\r\n  throw new Error(\r\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`\r\n  );\r\n};\r\n\r\ninterface Props {\r\n  entry: Entry\r\n}\r\n\r\nexport const EntryDetails = ({ entry }: Props) => {\r\n\r\n  //const [{ patientInfo, diagnoses }, dispatch] = useStateValue();\r\n  const [{ diagnoses },] = useStateValue();\r\n\r\n  const populateDiagnosesDetails = (): Diagnosis[] => {\r\n    const diagnosesDetailArr: Diagnosis[] = [];\r\n\r\n    if (diagnoses && diagnoses.length > 0) {      \r\n      entry.diagnosisCodes?.forEach(code => {\r\n        const details = diagnoses.find(d => { return d.code == code; });\r\n        (details !== undefined) && diagnosesDetailArr.push(details);\r\n      });\r\n      return diagnosesDetailArr;\r\n    }\r\n    return diagnosesDetailArr;\r\n  };\r\n\r\n  switch (entry.type) {\r\n    case EntryTypeNames.Hospital:\r\n\r\n      return <HospitalEntryComponent entry={entry} diagnosisDetails={populateDiagnosesDetails()} />;\r\n    case EntryTypeNames.HealthCheck:\r\n\r\n      return <HealthCheckEntryComponent entry={entry} diagnosisDetails={populateDiagnosesDetails()} />;\r\n    case EntryTypeNames.OccupationalHealthcare:\r\n      return <OccupationalHealthEntryComponent entry={entry} diagnosisDetails={populateDiagnosesDetails()} />;\r\n\r\n    default:\r\n      return assertNever(entry);\r\n  }\r\n\r\n};\r\n","import axios from 'axios';\r\nimport React from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Button, Icon, Segment } from 'semantic-ui-react';\r\nimport { AddEntryModal } from '../AddEntryModal';\r\nimport { apiBaseUrl } from '../constants';\r\nimport { addToDiagnoses, addToPatientInfoList, useStateValue } from '../state';\r\nimport { Diagnosis, Patient, EntryFormValues } from '../types';\r\nimport { EntryDetails } from './EntryDetails';\r\n\r\ninterface PatientDetailsParams {\r\n  id: string\r\n}\r\n\r\nconst PatientDetailsPage = () => {\r\n  const { id } = useParams<PatientDetailsParams>();\r\n  const [{ patientInfo, diagnoses }, dispatch] = useStateValue();\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  const currentPatient = Object.values(patientInfo).find((p) => p.id == id);\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n\r\n  React.useEffect(() => {\r\n    //check state for patient\r\n    //fetch the patient\r\n    const fetchPatientInfo = async () => {\r\n      try {\r\n        const response = await axios.get<Patient>(apiBaseUrl + '/patients/' + id);\r\n        const patient = response.data;\r\n        //console.log('patient',patient);\r\n        //put patient in state\r\n        dispatch(addToPatientInfoList(patient));\r\n\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    if (!currentPatient || currentPatient == undefined || currentPatient == null) {\r\n      void fetchPatientInfo();\r\n    }\r\n\r\n  }, [dispatch, currentPatient]);\r\n  \r\n\r\n  React.useEffect(() => {\r\n    //check state for Diagnoses\r\n    //fetch the Diagnoses\r\n    const fetchDiagnoses = async () => {\r\n      try {\r\n        const response = await axios.get<Diagnosis[]>(apiBaseUrl + '/diagnoses/');\r\n        const fetchedDiagnoses = response.data;\r\n        //put Diagnoses in state\r\n        dispatch(addToDiagnoses(fetchedDiagnoses));\r\n\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    if (!diagnoses || diagnoses.length < 1 || diagnoses == null) {\r\n      void fetchDiagnoses();\r\n    }\r\n\r\n  }, [dispatch]);\r\n\r\n  const submitNewEntry = async (values: EntryFormValues): Promise<void> => {\r\n    //console.log('values in submitNewEntry ', values);\r\n    try {\r\n      const {data: updatedPatient} = await axios.post<Patient>(\r\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\r\n        `${apiBaseUrl}/patients/${currentPatient?.id}/entries`,\r\n        values\r\n      );\r\n      dispatch(addToPatientInfoList(updatedPatient));\r\n      closeModal();\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    } catch (e: any) {\r\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\r\n      console.error(`try-catch submitNewEntry ${e.response?.data}` || 'Unknown Error');\r\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\r\n      setError(`try-catch submitNewEntry  ${e.response?.data?.error}` || 'Unknown error');\r\n    }\r\n  };\r\n\r\n/*   const submitNewEntry = (values: EntryFormValues)=> {\r\n    console.log('values in submitNewEntry ', values);\r\n    closeModal();\r\n  }; */\r\n\r\n  const genderIcons = () => {\r\n    switch (currentPatient?.gender) {\r\n      case 'male': return 'mars';\r\n      case 'female': return 'venus';\r\n      case 'other': return 'other gender horizontal';\r\n      default:\r\n        return 'mars';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentPatient ?\r\n        <div>\r\n          <span style={{ display: 'flex', alignItems: 'center' }}>\r\n            <h1 style={{ display: \"inline\", paddingRight: 10, margin: 0 }} >{currentPatient.name} </h1>\r\n            <div><Icon name={genderIcons()} size='large' /></div>\r\n          </span>\r\n\r\n          <p>ssn: {currentPatient.ssn}</p>\r\n          <p>occupation: {currentPatient.occupation}</p>\r\n          <p>{currentPatient.dateOfBirth}</p>\r\n          <AddEntryModal  \r\n            modalOpen={modalOpen}\r\n            onSubmit={submitNewEntry}\r\n            error={error}\r\n            onClose={closeModal}\r\n          />\r\n          <Button onClick={openModal}>Add New Entry</Button>\r\n\r\n          <h3>Entries</h3>\r\n          {currentPatient.entries.length > 0 ? currentPatient.entries.map((entry) => {\r\n            return (\r\n              <EntryDetails entry={entry} key={entry.id} />\r\n            );\r\n          }) : <Segment>The patient has not had any visits.</Segment>}\r\n        </div> :\r\n        <h1>Loading</h1>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientDetailsPage;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\r\n\r\nimport { apiBaseUrl } from \"./constants\";\r\nimport { addToDiagnoses, setPatientList, useStateValue } from \"./state\";\r\nimport { Diagnosis, Patient } from \"./types\";\r\n\r\nimport PatientListPage from \"./PatientListPage\";\r\nimport PatientDetailsPage from \"./PatientDetailsPage\";\r\n\r\nconst App = () => {\r\n  const [{diagnoses}, dispatch] = useStateValue();\r\n  React.useEffect(() => {\r\n    void axios.get<void>(`${apiBaseUrl}/ping`);\r\n\r\n    const fetchPatientList = async () => {\r\n      try {\r\n        //save value.data as patientListFromApi\r\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\r\n          `${apiBaseUrl}/patients`\r\n        );\r\n        dispatch(setPatientList(patientListFromApi));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchPatientList();\r\n  }, [dispatch]);\r\n  \r\n  React.useEffect(() => {\r\n    //check state for Diagnoses\r\n    //console.log('fetching the diagnoses');\r\n    //fetch the Diagnoses\r\n    const fetchDiagnoses = async () => {\r\n      try {\r\n        const response = await axios.get<Diagnosis[]>(apiBaseUrl + '/diagnoses/');\r\n        const fetchedDiagnoses = response.data;\r\n        //console.log('fetchedDiagnoses', fetchedDiagnoses);\r\n        //put Diagnoses in state\r\n        dispatch(addToDiagnoses(fetchedDiagnoses));\r\n\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    if (!diagnoses || diagnoses.length < 1 || diagnoses == null ) {\r\n      void fetchDiagnoses();\r\n    }\r\n    \r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Container>\r\n          <Header as=\"h1\">Patientor</Header>\r\n          <Button as={Link} to=\"/\" primary>\r\n            Home\r\n          </Button>\r\n          <Divider hidden />\r\n          <Switch>\r\n            <Route path=\"/patients/:id\">\r\n              <PatientDetailsPage />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <PatientListPage />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport { reducer, StateProvider } from \"./state\";\r\n\r\nReactDOM.render(\r\n  <StateProvider reducer={reducer}>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}